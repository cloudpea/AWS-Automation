{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Transit VPC: This template creates a dedicated transit VPC with FortiGate Instances . ***NOTE*** You must first subscribe to the appropriate FortiGate marketplace BYOL or Pay As You Go AMI from the AWS Marketplace before you launch this template. ",
	"Parameters": {
		"FortiGateKeyName": {
			"Type": "AWS::EC2::KeyPair::KeyName",
			"Description": "Name of and existing EC2 KeyPair to enable SSH access to the instance"
		},
		"FortiGateInstanceType": {
			"Type": "String",
			"Default": "c4.xlarge",
			"Description": "Enter the instance type of FortiGates",
			"ConstraintDescription": "must be a valid EC2 instance type.",
			"AllowedValues": [
				"t2.small",
				"c4.large",
				"c4.xlarge",
				"c4.2xlarge",
				"c4.4xlarge",
				"c4.8xlarge",
				"c5.large",
				"c5.xlarge",
				"c5.2xlarge",
				"c5.4xlarge",
				"c5.9xlarge"
			]
		},
		"LicenseType": {
			"Description": "Select the License Type for your Fortinet Gateway Instance, between BYOL and Pay As You Go AMI's: - (FortiGate OnDemand AMI - Pay As You Go & FortiGate BYOL AMI - BYOL )",
			"Type": "String",
			"Default": "OnDemand",
			"AllowedValues": [
				"OnDemand",
				"BYOL"
			]
		},
		"SourceS3Bucket": {
			"Description": " [Optional - BYOL or OnDemand] Enter the Source S3 Bucket name, where your license files and config files exists",
			"Type": "String",
			"Default": ""
		},
		"SourceS3BucketRegion": {
			"Description": "[Optional - BYOL or OnDemand] Enter the Source S3 Bucket Region",
			"Type": "String",
			"Default": ""
		},
		"Fgt1LicenseFile": {
			"Description": "[Optional - BYOL only] Enter the name of the license file for FortiGate1",
			"Type": "String",
			"Default": ""
		},
		"Fgt1ConfigFile": {
			"Description": "[Optional - BYOL or OnDemand] Enter the name of the config file for FortiGate1",
			"Type": "String",
			"Default": ""
		},
		"Fgt2LicenseFile": {
			"Description": "[Optional - BYOL only] Enter the name of the license file for FortiGate2",
			"Type": "String",
			"Default": ""
		},
		"Fgt2ConfigFile": {
			"Description": "[Optional - BYOL or OnDemand] Enter the name of the config file for FortiGate2",
			"Type": "String",
			"Default": ""
		},
		"TagCreated": {
			"Description": "Date of the deployment being created",
			"Type": "String"
		},
		"VpcCidrIp": {
			"Description": "Enter the CIDR range for Transit VPC",
			"Type": "String",
			"Default": "10.80.0.0/19"
		},
		"PublicSubnet1CIDR": {
			"Description": "Enter the CIDR range  for Public Subnet1 Block",
			"Type": "String",
			"Default": "10.80.1.0/25",
			"AllowedPattern": "[a-zA-Z0-9]+\\..+"
		},
		"PublicSubnet2CIDR": {
			"Description": "Enter the CIDR range for Public Subnet2 Block",
			"Type": "String",
			"Default": "10.80.2.0/25",
			"AllowedPattern": "[a-zA-Z0-9]+\\..+"
		},
		"TagPrimaryOwner": {
			"Description": "Owner of the Product",
			"Type": "String",
			"Default": "engineer@acme.com"
		},
		"TagStack": {
			"Description": "Enter the name of the Stack",
			"Type": "String",
			"Default": "Production"
		},
		"SpokeTag": {
			"Description": "Tag to use to identify spoke VGWs to connect to FortiGate Transit VPC.",
			"Type": "String",
			"Default": "transitvpc:spoke"
		},
		"SpokeTagValue": {
			"Description": "Tag value to use to identify spoke VGWs to connect to FortiGate Transit VPC.",
			"Type": "String",
			"Default": "true"
		},
		"S3Prefix": {
			"Description": "S3 prefix to append before VPN Configration files.",
			"Type": "String",
			"Default": "vpnconfigrations/"
		},
		"BGP": {
			"Description": "BGP Value used for Transit VPC.",
			"Type": "String",
			"Default": "65008"
		},
		"AutomateUser": {
			"Description": "User Account used for pushing config",
			"Type": "String",
			"Default": "fortiautomate"
		},
		"AutomateUserPwd": {
			"NoEcho": "true",
			"Description": "User Account password for pushing config",
			"Type": "String",
			"MinLength": "1",
			"MaxLength": "41",
			"AllowedPattern": "[a-zA-Z0-9]*"
		},
		"SpokeAWSAccountId": {
			"Description": "Another Spoke AWS Account ID to authorize access to Transit S3 Bucket (Used to store VPN Config & KMS Key).",
			"Type": "String",
			"Default": ""
		}
	},
	"Conditions": {
		"AuthorizeAnotherAccount": {
			"Fn::Not": [{
				"Fn::Equals": [{
						"Ref": "SpokeAWSAccountId"
					},
					""
				]
			}]
		},
		"CreateFortigateResource": {
			"Fn::Not": [{
				"Fn::Equals": [{
						"Ref": "LicenseType"
					},
					"BYOL"
				]
			}]
		}
	},
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [{
					"Label": {
						"default": "Network Configuration"
					},
					"Parameters": ["VpcCidrIp", "PublicSubnet1CIDR", "PublicSubnet2CIDR", "SpokeTag", "SpokeTagValue", "BGP"]
				},
				{
					"Label": {
						"default": "License Configuration"
					},
					"Parameters": ["LicenseType", "SourceS3Bucket", "SourceS3BucketRegion", "Fgt1LicenseFile", "Fgt1ConfigFile", "Fgt2LicenseFile", "Fgt2ConfigFile"]
				},
				{
					"Label": {
						"default": "EC2 Configuration"
					},
					"Parameters": ["FortiGateKeyName", "FortiGateInstanceType"]
				},
				{
					"Label": {
						"default": "Service Configuration"
					},
					"Parameters": ["S3Prefix", "AutomateUser", "AutomateUserPwd", "SpokeAWSAccountId"]
				},
				{
					"Label": {
						"default": "Tag Configuration"
					},
					"Parameters": ["TagStack", "TagPrimaryOwner", "TagCreated"]
				}
			]
		}
	},
	"Mappings": {
		"FortiRegionMap": {
			"ap-northeast-1": {
				"OnDemand": "ami-a08961df",
				"BYOL": "ami-b19870ce"
			},
			"ap-northeast-2": {
				"OnDemand": "ami-e10ba28f",
				"BYOL": "ami-090aa367"
			},
			"ap-south-1": {
				"OnDemand": "ami-64c0e30b",
				"BYOL": "ami-dccae9b3"
			},
			"ap-southeast-1": {
				"OnDemand": "ami-7dcdf801",
				"BYOL": "ami-ecbe8b90"
			},
			"ap-southeast-2": {
				"OnDemand": "ami-b504d3d7",
				"BYOL": "ami-3508df57"
			},
			"ca-central-1": {
				"OnDemand": "ami-7888081c",
				"BYOL": "ami-168a0a72"
			},
			"eu-central-1": {
				"OnDemand": "ami-cebb9925",
				"BYOL": "ami-9e81a375"
			},
			"eu-west-1": {
				"OnDemand": "ami-ff3c0886",
				"BYOL": "ami-931622ea"
			},
			"eu-west-2": {
				"OnDemand": "ami-5965873e",
				"BYOL": "ami-5c698b3b"
			},
			"eu-west-3": {
				"OnDemand": "ami-8a9c2df7",
				"BYOL": "ami-b39f2ece"
			},
			"sa-east-1": {
				"OnDemand": "ami-b091ccdc",
				"BYOL": "ami-098cd165"
			},
			"us-east-1": {
				"OnDemand": "ami-f460e28b",
				"BYOL": "ami-15189a6a"
			},
			"us-east-2": {
				"OnDemand": "ami-c0300da5",
				"BYOL": "ami-0f2e136a"
			},
			"us-west-1": {
				"OnDemand": "ami-481b0528",
				"BYOL": "ami-c3120ca3"
			},
			"us-west-2": {
				"OnDemand": "ami-b97100c1",
				"BYOL": "ami-bb7f0ec3"
			}
		},
		"CodeRegionMap": {
			"us-east-1": {
				"LambdaCode": "fortibucket-us-east-1"
			},
			"us-east-2": {
				"LambdaCode": "fortibucket-us-east-2"
			},
			"eu-west-1": {
				"LambdaCode": "fortibucket-eu-west-1"
			},
			"eu-west-2": {
				"LambdaCode": "fortibucket-eu-west-2"
			},
			"eu-west-3": {
				"LambdaCode": "fortibucket-eu-west-3"
			},
			"eu-central-1": {
				"LambdaCode": "fortibucket-eu-central-1"
			},
			"ap-northeast-1": {
				"LambdaCode": "fortibucket-ap-northeast-1"
			},
			"ap-northeast-2": {
				"LambdaCode": "fortibucket-ap-northeast-2"
			},
			"ap-southeast-1": {
				"LambdaCode": "fortibucket-ap-southeast-1"
			},
			"ap-southeast-2": {
				"LambdaCode": "fortibucket-ap-southeast-2"
			},
			"ap-south-1": {
				"LambdaCode": "fortibucket-ap-south-1"
			},
			"sa-east-1": {
				"LambdaCode": "fortibucket-sa-east-1"
			},
			"us-west-1": {
				"LambdaCode": "fortibucket-us-west-1"
			},
			"us-west-2": {
				"LambdaCode": "fortibucket-us-west-2"
			},
			"ca-central-1": {
				"LambdaCode": "fortibucket-ca-central-1"
			}
		}
	},
	"Resources": {
		"VPC": {
			"Type": "AWS::EC2::VPC",
			"Properties": {
				"CidrBlock": {
					"Ref": "VpcCidrIp"
				},
				"InstanceTenancy": "default",
				"EnableDnsSupport": "true",
				"EnableDnsHostnames": "true",
				"Tags": [{
						"Key": "Stack",
						"Value": {
							"Ref": "TagStack"
						}
					},
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"", [
									"TransitVPC-",
									{
										"Ref": "TagStack"
									}
								]
							]
						}
					},
					{
						"Key": "Owner",
						"Value": {
							"Ref": "TagPrimaryOwner"
						}
					},
					{
						"Key": "Created",
						"Value": {
							"Ref": "TagCreated"
						}
					}
				]
			}
		},
		"PublicSubnetFrontEnd1a": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"CidrBlock": {
					"Ref": "PublicSubnet1CIDR"
				},
				"AvailabilityZone": {
					"Fn::Select": [
						"1",
						{
							"Fn::GetAZs": ""
						}
					]
				},
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [{
						"Key": "Stack",
						"Value": {
							"Ref": "TagStack"
						}
					},
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"", [{
										"Ref": "TagStack"
									},
									"_PublicSubnet_1a_FrontEnd"
								]
							]
						}
					},
					{
						"Key": "Created",
						"Value": {
							"Ref": "TagCreated"
						}
					},
					{
						"Key": "Owner",
						"Value": {
							"Ref": "TagPrimaryOwner"
						}
					}
				]
			}
		},
		"PublicSubnetFrontEnd1b": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"CidrBlock": {
					"Ref": "PublicSubnet2CIDR"
				},
				"AvailabilityZone": {
					"Fn::Select": [
						"0",
						{
							"Fn::GetAZs": ""
						}
					]
				},
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [{
						"Key": "Stack",
						"Value": {
							"Ref": "TagStack"
						}
					},
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"", [{
										"Ref": "TagStack"
									},
									"_PublicSubnet_1b_FrontEnd"
								]
							]
						}
					},
					{
						"Key": "Created",
						"Value": {
							"Ref": "TagCreated"
						}
					},
					{
						"Key": "Owner",
						"Value": {
							"Ref": "TagPrimaryOwner"
						}
					}
				]
			}
		},
		"InternetGateway": {
			"Type": "AWS::EC2::InternetGateway"
		},
		"AttachGateway": {
			"Type": "AWS::EC2::VPCGatewayAttachment",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"InternetGatewayId": {
					"Ref": "InternetGateway"
				}
			}
		},
		"PublicRoute": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [{
						"Key": "Stack",
						"Value": {
							"Ref": "TagStack"
						}
					},
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"", [{
										"Ref": "TagStack"
									},
									"_PublicRouteTable"
								]
							]
						}
					},
					{
						"Key": "Created",
						"Value": {
							"Ref": "TagCreated"
						}
					},
					{
						"Key": "Owner",
						"Value": {
							"Ref": "TagPrimaryOwner"
						}
					}
				]
			}
		},
		"PublicSubnet1RouteTableAssociation": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"RouteTableId": {
					"Ref": "PublicRoute"
				},
				"SubnetId": {
					"Ref": "PublicSubnetFrontEnd1a"
				}
			}
		},
		"PublicSubnet2RouteTableAssociation": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"RouteTableId": {
					"Ref": "PublicRoute"
				},
				"SubnetId": {
					"Ref": "PublicSubnetFrontEnd1b"
				}
			}
		},
		"route1": {
			"Type": "AWS::EC2::Route",
			"Properties": {
				"DestinationCidrBlock": "0.0.0.0/0",
				"RouteTableId": {
					"Ref": "PublicRoute"
				},
				"GatewayId": {
					"Ref": "InternetGateway"
				}
			}
		},
		"BootfromS3": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": [
								"ec2.amazonaws.com"
							]
						},
						"Action": [
							"sts:AssumeRole"
						]
					}]
				},
				"Path": "/"
			}
		},
		"BootfromS3Policies": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": "root",
				"PolicyDocument": {
					"Statement": [{
						"Effect": "Allow",
						"Action": [
							"s3:*"
						],
						"Resource": [
							"*"
						]
					}]
				},
				"Roles": [{
					"Ref": "BootfromS3"
				}]
			}
		},
		"BootEC2": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [{
					"Ref": "BootfromS3"
				}]
			}
		},
		"S3Endpoint": {
			"Type": "AWS::EC2::VPCEndpoint",
			"Properties": {
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": "*",
						"Action": [
							"s3:*"
						],
						"Resource": [
							"*"
						]
					}]
				},
				"RouteTableIds": [{
					"Ref": "PublicRoute"
				}],
				"ServiceName": {
					"Fn::Join": [
						"", [
							"com.amazonaws.",
							{
								"Ref": "AWS::Region"
							},
							".s3"
						]
					]
				},
				"VpcId": {
					"Ref": "VPC"
				}
			}
		},
		"sgFortiGateSG": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Fortigate Security Group",
				"VpcId": {
					"Ref": "VPC"
				},
				"SecurityGroupIngress": [{
						"IpProtocol": "tcp",
						"FromPort": "22",
						"ToPort": "22",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "443",
						"ToPort": "443",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "22",
						"ToPort": "22",
						"SourceSecurityGroupId": {
							"Fn::GetAtt": ["sgLambdaSG", "GroupId"]
						}
					}
				],
				"SecurityGroupEgress": [{
					"IpProtocol": "-1",
					"CidrIp": "0.0.0.0/0"
				}]
			}
		},
		"sgLambdaSG": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Lambda Security Group",
				"VpcId": {
					"Ref": "VPC"
				},
				"SecurityGroupEgress": [{
					"IpProtocol": "-1",
					"CidrIp": "0.0.0.0/0"
				}]
			}
		},
		"FORTIGateEip1": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "vpc",
				"InstanceId": {
					"Ref": "FortiGate1a"
				}
			}
		},
		"FORTIGateEip2": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "vpc",
				"InstanceId": {
					"Ref": "FortiGate1b"
				}
			}
		},
		"FortiGate1a": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"DisableApiTermination": "FALSE",
				"IamInstanceProfile": {
					"Ref": "BootEC2"
				},
				"ImageId": {
					"Fn::FindInMap": [
						"FortiRegionMap",
						{
							"Ref": "AWS::Region"
						},
						{
							"Ref": "LicenseType"
						}
					]
				},
				"InstanceType": {
					"Ref": "FortiGateInstanceType"
				},
				"KeyName": {
					"Ref": "FortiGateKeyName"
				},
				"Monitoring": "false",
				"SourceDestCheck": "false",
				"Tags": [{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"", [{
										"Ref": "TagStack"
									},
									"_Fortigate_01"
								]
							]
						}
					},
					{
						"Key": "Owner",
						"Value": {
							"Ref": "TagPrimaryOwner"
						}
					},
					{
						"Key": "Stack",
						"Value": {
							"Ref": "TagStack"
						}
					},
					{
						"Key": "Created",
						"Value": {
							"Ref": "TagCreated"
						}
					}
				],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
							"{\n",
							"\"bucket\"", " : ", "\"", {
								"Ref": "SourceS3Bucket"
							}, "\"", ",\n",
							"\"region\"", " : ", "\"", {
								"Ref": "SourceS3BucketRegion"
							}, "\"", ",\n",
							"\"license\"", " : ", "\"", "/", {
								"Ref": "Fgt1LicenseFile"
							}, "\"", ",\n",
							"\"config\"", " : ", "\"", "/", {
								"Ref": "Fgt1ConfigFile"
							}, "\"", ",\n",
							"}"
						]]
					}
				},
				"NetworkInterfaces": [{
					"DeleteOnTermination": "true",
					"Description": "Primary network interface",
					"DeviceIndex": 0,
					"SubnetId": {
						"Ref": "PublicSubnetFrontEnd1a"
					},
					"GroupSet": [{
						"Ref": "sgFortiGateSG"
					}]
				}]
			}
		},
		"FortiGate1b": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"DisableApiTermination": "FALSE",
				"IamInstanceProfile": {
					"Ref": "BootEC2"
				},
				"ImageId": {
					"Fn::FindInMap": [
						"FortiRegionMap",
						{
							"Ref": "AWS::Region"
						},
						{
							"Ref": "LicenseType"
						}
					]
				},
				"InstanceType": {
					"Ref": "FortiGateInstanceType"
				},
				"KeyName": {
					"Ref": "FortiGateKeyName"
				},
				"Monitoring": "false",
				"SourceDestCheck": "false",
				"Tags": [{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"", [{
										"Ref": "TagStack"
									},
									"_Fortigate_02"
								]
							]
						}
					},
					{
						"Key": "Owner",
						"Value": {
							"Ref": "TagPrimaryOwner"
						}
					},
					{
						"Key": "Stack",
						"Value": {
							"Ref": "TagStack"
						}
					},
					{
						"Key": "Created",
						"Value": {
							"Ref": "TagCreated"
						}
					}
				],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
							"{\n",
							"\"bucket\"", " : ", "\"", {
								"Ref": "SourceS3Bucket"
							}, "\"", ",\n",
							"\"region\"", " : ", "\"", {
								"Ref": "SourceS3BucketRegion"
							}, "\"", ",\n",
							"\"license\"", " : ", "\"", "/", {
								"Ref": "Fgt2LicenseFile"
							}, "\"", ",\n",
							"\"config\"", " : ", "\"", "/", {
								"Ref": "Fgt2ConfigFile"
							}, "\"", ",\n",
							"}"
						]]
					}
				},
				"NetworkInterfaces": [{
					"DeleteOnTermination": "true",
					"Description": "Primary network interface",
					"DeviceIndex": 0,
					"SubnetId": {
						"Ref": "PublicSubnetFrontEnd1b"
					},
					"GroupSet": [{
						"Ref": "sgFortiGateSG"
					}]
				}]
			}
		},
		"S3Bucket": {
			"Type": "AWS::S3::Bucket"
		},
		"S3BucketPolicy": {
			"Type": "AWS::S3::BucketPolicy",
			"Properties": {
				"Bucket": {
					"Ref": "S3Bucket"
				},
				"PolicyDocument": {
					"Statement": [{
							"Action": [
								"s3:*"
							],
							"Effect": "Allow",
							"Resource": [{
									"Fn::Join": ["", ["arn:aws:s3:::", {
										"Ref": "S3Bucket"
									}]]
								},
								{
									"Fn::Join": ["", ["arn:aws:s3:::", {
										"Ref": "S3Bucket"
									}, "/", "*"]]
								}
							],
							"Principal": {
								"AWS": [{
									"Fn::Join": ["", ["arn:aws:iam::", {
										"Fn::If": ["AuthorizeAnotherAccount", {
											"Ref": "SpokeAWSAccountId"
										}, {
											"Ref": "AWS::AccountId"
										}]
									}, ":root"]]
								}]
							}
						},
						{
							"Action": [
								"s3:*"
							],
							"Effect": "Allow",
							"Resource": {
								"Fn::Join": [
									"", [
										"arn:aws:s3:::",
										{
											"Ref": "S3Bucket"
										},
										"/",
										"*"
									]
								]
							},
							"Principal": {
								"AWS": {
									"Fn::Join": ["", ["arn:aws:iam::", {
										"Ref": "AWS::AccountId"
									}, ":role/", {
										"Ref": "MainFunctionRole"
									}]]
								}
							}
						},
						{
							"Action": [
								"s3:*"
							],
							"Effect": "Allow",
							"Resource": {
								"Fn::Join": [
									"", [
										"arn:aws:s3:::",
										{
											"Ref": "S3Bucket"
										},
										"/",
										"*"
									]
								]
							},
							"Principal": {
								"AWS": {
									"Fn::Join": ["", ["arn:aws:iam::", {
										"Ref": "AWS::AccountId"
									}, ":role/", {
										"Ref": "WorkerConfigRole"
									}]]
								}
							}
						}
					]
				}
			}
		},
		"MainFunctionRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": ["lambda.amazonaws.com"]
						},
						"Action": ["sts:AssumeRole"]
					}]
				},
				"Path": "/"
			}
		},
		"MainFunctionRolePolicy": {
			"DependsOn": [
				"MainFunctionRole"
			],
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": "MainFunctionRolePolicy",
				"Roles": [{
					"Ref": "MainFunctionRole"
				}],
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
							"Effect": "Allow",
							"Action": ["logs:*"],
							"Resource": ["arn:aws:logs:*:*:*"]
						},
						{
							"Effect": "Allow",
							"Action": [
								"ec2:Describe*",
								"ec2:CreateCustomerGateway",
								"ec2:DeleteCustomerGateway",
								"ec2:CreateVpnConnection",
								"ec2:DeleteVpnConnection",
								"ec2:CreateTags"
							],
							"Resource": ["*"]
						},
						{
							"Effect": "Allow",
							"Action": [
								"s3:*"
							],
							"Resource": {
								"Fn::Join": ["", ["arn:aws:s3:::", {
									"Ref": "S3Bucket"
								}]]
							}
						}
					]
				}
			}
		},
		"MainFunctionLambda": {
			"Type": "AWS::Lambda::Function",
			"DependsOn": ["MainFunctionRole", "MainFunctionRolePolicy", "WorkerConfigLambda"],
			"Properties": {
				"Description": "Main Lambda Function is used to update s3 notification policy, craete Fortigate automate user, performs the VGW poller function ",
				"Code": {
					"S3Bucket": {
						"Fn::FindInMap": [
							"CodeRegionMap",
							{
								"Ref": "AWS::Region"
							},
							"LambdaCode"
						]
					},
					"S3Key": "main_functionv2.zip"
				},
				"Environment": {
					"Variables": {
						"S3Bucket": {
							"Ref": "S3Bucket"
						},
						"S3Prefix": {
							"Ref": "S3Prefix"
						},
						"FortinetEIP1": {
							"Ref": "FORTIGateEip1"
						},
						"FortinetEIP2": {
							"Ref": "FORTIGateEip2"
						},
						"FortinetPIP1": {
							"Fn::GetAtt": ["FortiGate1a", "PrivateIp"]
						},
						"FortinetPIP2": {
							"Fn::GetAtt": ["FortiGate1b", "PrivateIp"]
						},
						"BGP": {
							"Ref": "BGP"
						},
						"NameTag": {
							"Ref": "SpokeTag"
						},
						"NameValue": {
							"Ref": "SpokeTagValue"
						},
						"LambdaFunctionArn": {
							"Fn::GetAtt": ["WorkerConfigLambda", "Arn"]
						},
						"FortinetPass1": {
							"Ref": "FortiGate1a"
						},
						"FortinetPass2": {
							"Ref": "FortiGate1b"
						},
						"FortinetUser": "admin",
						"AutomateUser": {
							"Ref": "AutomateUser"
						},
						"AutomateUserPwd": {
							"Ref": "AutomateUserPwd"
						}
					}
				},
				"Role": {
					"Fn::GetAtt": ["MainFunctionRole", "Arn"]
				},
				"Timeout": 60,
				"Handler": "main_function.main_handler",
				"Runtime": "python2.7",
				"MemorySize": 128
			}
		},
		"ScheduledRule": {
			"Type": "AWS::Events::Rule",
			"Properties": {
				"Description": "ScheduledRule",
				"ScheduleExpression": "rate(5 minutes)",
				"State": "ENABLED",
				"Targets": [{
					"Arn": {
						"Fn::GetAtt": ["MainFunctionLambda", "Arn"]
					},
					"Id": "TargetFunctionV1"
				}]
			}
		},
		"PermissionForEventsToInvokeLambda": {
			"Type": "AWS::Lambda::Permission",
			"Properties": {
				"FunctionName": {
					"Ref": "MainFunctionLambda"
				},
				"Action": "lambda:InvokeFunction",
				"Principal": "events.amazonaws.com",
				"SourceArn": {
					"Fn::GetAtt": ["ScheduledRule", "Arn"]
				}
			}
		},
		"WorkerConfigRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": ["lambda.amazonaws.com"]
						},
						"Action": ["sts:AssumeRole"]
					}]
				},
				"Path": "/"
			}
		},
		"WorkerConfigRolePolicy": {
			"DependsOn": [
				"WorkerConfigRole"
			],
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": "WorkerConfigRoleFunctionPolicy",
				"Roles": [{
					"Ref": "WorkerConfigRole"
				}],
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
							"Effect": "Allow",
							"Action": ["logs:*"],
							"Resource": ["arn:aws:logs:*:*:*"]
						},
						{
							"Effect": "Allow",
							"Action": [
								"lambda:*",
								"events:*",
								"ec2:Describe*",
								"ec2:DescribeSecurityGroups",
								"ec2:DescribeSubnets",
								"ec2:DescribeVpcs",
								"ec2:CreateCustomerGateway",
								"ec2:DeleteCustomerGateway",
								"ec2:CreateVpnConnection",
								"ec2:DeleteVpnConnection",
								"ec2:CreateTags",
								"ec2:CreateNetworkInterface",
								"ec2:DescribeNetworkInterfaces",
								"ec2:DeleteNetworkInterface"
							],
							"Resource": ["*"]
						},
						{
							"Effect": "Allow",
							"Action": [
								"s3:*"
							],
							"Resource": {
								"Fn::Join": ["", ["arn:aws:s3:::", {
									"Ref": "S3Bucket"
								}]]
							}
						}
					]
				}
			}
		},
		"WorkerConfigLambda": {
			"Type": "AWS::Lambda::Function",
			"DependsOn": ["WorkerConfigRole", "WorkerConfigRolePolicy"],
			"Properties": {
				"Description": "Worker Config Lambda Function is used to check for new VPN Configuartion files and update config on to Fortigate EC2 instances ",
				"Code": {
					"S3Bucket": {
						"Fn::FindInMap": [
							"CodeRegionMap",
							{
								"Ref": "AWS::Region"
							},
							"LambdaCode"
						]
					},
					"S3Key": "56_worker_functionv2.zip"
				},
				"Environment": {
					"Variables": {
						"S3Bucket": {
							"Ref": "S3Bucket"
						}
					}
				},
				"Role": {
					"Fn::GetAtt": ["WorkerConfigRole", "Arn"]
				},
				"Timeout": 180,
				"Handler": "worker_function.worker_handler",
				"Runtime": "python2.7",
				"MemorySize": 512,
				"VpcConfig": {
					"SecurityGroupIds": [{
						"Ref": "sgLambdaSG"
					}],
					"SubnetIds": [{
							"Ref": "PublicSubnetFrontEnd1a"
						},
						{
							"Ref": "PublicSubnetFrontEnd1b"
						}
					]
				}
			}
		},
		"PermissionForEventsToInvokeWorkerConfigLambda": {
			"Type": "AWS::Lambda::Permission",
			"Properties": {
				"Action": "lambda:invokeFunction",
				"FunctionName": {
					"Fn::GetAtt": ["WorkerConfigLambda", "Arn"]
				},
				"Principal": "s3.amazonaws.com",
				"SourceArn": {
					"Fn::Join": ["", ["arn:aws:s3:::", {
						"Ref": "S3Bucket"
					}]]
				}
			}
		}
	},
	"Outputs": {
		"UsernameforFortiGate1": {
			"Value": "admin",
			"Description": "Username to Access Fortigate"
		},
		"PasswordforFortiGate1": {
			"Value": {
				"Ref": "FortiGate1a"
			},
			"Description": "Password to login to Fortigate is the instance id"
		},
		"Fortigate1ConsoleAccess": {
			"Value": {
				"Fn::Join": [
					"", [
						"https://",
						{
							"Ref": "FORTIGateEip1"
						}
					]
				]
			},
			"Description": "Connection to Fortigate1"
		},
		"UsernameforFortiGate2": {
			"Value": "admin",
			"Description": "Username to Access Fortigate"
		},
		"PasswordforFortiGate2": {
			"Value": {
				"Ref": "FortiGate1b"
			},
			"Description": "Password to login to Fortigate is the instance id"
		},
		"Fortigate2ConsoleAccess": {
			"Value": {
				"Fn::Join": [
					"", [
						"https://",
						{
							"Ref": "FORTIGateEip2"
						}
					]
				]
			},
			"Description": "Connection to Fortigate2 Instance"
		},
		"MainLambdaFunction": {
			"Value": {
				"Ref": "MainFunctionLambda"
			},
			"Description": "Main Lambda Function is used to update s3 notification policy, craete Fortigate automate user, performs the VGW poller function "
		},
		"MainLambdaRole": {
			"Value": {
				"Ref": "MainFunctionRole"
			},
			"Description": "Main Lambda Function is used to update s3 notification policy, craete Fortigate automate user, performs the VGW poller function "
		},
		"WorkerConfigLambdaFunction": {
			"Value": {
				"Ref": "WorkerConfigLambda"
			},
			"Description": "Worker Config Lambda Function is used to check for new VPN Configuartion files and update config on Fortigate EC2 instances "
		},
		"WorkerConfigLambdaRole": {
			"Value": {
				"Ref": "WorkerConfigRole"
			},
			"Description": "Worker Config Lambda Function is used to check for new VPN Configuartion files and update config on Fortigate EC2 instances "
		},
		"S3Bucket": {
			"Value": {
				"Ref": "S3Bucket"
			},
			"Description": "S3Bucket is used to update all the Fortigate VPN configuration files "
		},
		"SpokeTag": {
			"Value": {
				"Ref": "SpokeTag"
			},
			"Description": "Tag to use to identify spoke VGWs to connect to Transit VPC "
		},
		"SpokeTagValue": {
			"Value": {
				"Ref": "SpokeTagValue"
			},
			"Description": "Tag value to use to identify spoke VGWs to connect to Transit VPC. "
		}
	}
}
