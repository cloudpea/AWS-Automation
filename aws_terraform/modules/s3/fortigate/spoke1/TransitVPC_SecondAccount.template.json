{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": " Spoke - Transit VPC: This template creates a Spoke Virtual Private Gateway poller function to find new spoke VPCs to be added your transit network.",
  "Parameters": {
    "S3BucketName": {
      "Description": "Name of the Transit VPC S3 bucket Which is use the read your Transit endpoints & store configuration files ",
      "Type": "String",
      "Default": "transit-vpc"
    },
    "TagCreated": {
      "Description": "Date of the deployment being created",
      "Type": "String"
    },
    "TagPrimaryOwner": {
      "Description": "Owner of the Product",
      "Type": "String",
      "Default": "engineer@acme.com"
    },
    "TagStack": {
      "Description": "Enter the name of the Stack",
      "Type": "String",
      "Default": "Networking"
    }
  },
  "Mappings": {
    "CodeRegionMap": {
      "us-east-1": {
        "LambdaCode": "fortibucket-us-east-1"
      },
      "us-east-2": {
        "LambdaCode": "fortibucket-us-east-2"
      },
      "eu-west-1": {
        "LambdaCode": "fortibucket-eu-west-1"
      },
      "eu-west-2": {
        "LambdaCode": "fortibucket-eu-west-2"
      },
      "eu-west-3": {
        "LambdaCode": "fortibucket-eu-west-3"
      },
      "eu-central-1": {
        "LambdaCode": "fortibucket-eu-central-1"
      },
      "ap-northeast-1": {
        "LambdaCode": "fortibucket-ap-northeast-1"
      },
      "ap-northeast-2": {
        "LambdaCode": "fortibucket-ap-northeast-2"
      },
      "ap-southeast-1": {
        "LambdaCode": "fortibucket-ap-southeast-1"
      },
      "ap-southeast-2": {
        "LambdaCode": "fortibucket-ap-southeast-2"
      },
      "ap-south-1": {
        "LambdaCode": "fortibucket-ap-south-1"
      },
      "sa-east-1": {
        "LambdaCode": "fortibucket-sa-east-1"
      },
      "us-west-1": {
        "LambdaCode": "fortibucket-us-west-1"
      },
      "us-west-2": {
        "LambdaCode": "fortibucket-us-west-2"
      },
      "ca-central-1": {
        "LambdaCode": "fortibucket-ca-central-1"
      }
    }
  },
  "Resources": {
    "VgwPollerRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "VgwPollerRolePolicy": {
      "DependsOn": [
        "VgwPollerRole"
      ],
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "VgwPollerFunctionRolePolicy",
        "Roles": [
          {
            "Ref": "VgwPollerRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:*"
              ],
              "Resource": [
                "arn:aws:logs:*:*:*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "ec2:Describe*",
                "ec2:CreateCustomerGateway",
                "ec2:DeleteCustomerGateway",
                "ec2:CreateVpnConnection",
                "ec2:DeleteVpnConnection",
                "ec2:CreateTags"
              ],
              "Resource": [
                "*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:PutObjectAcl",
                "s3:GetObject"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "S3BucketName"
                    },
                    "/",
                    "*"
                  ]
                ]
              }
            }
          ]
        }
      }
    },
    "VgwPollerLambda": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [
        "VgwPollerRole",
        "VgwPollerRolePolicy"
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {"Fn::FindInMap": ["CodeRegionMap", {"Ref": "AWS::Region"}, "LambdaCode"]},
          "S3Key": "spokevgw_functionv2.zip"
        },
        "Environment": {
          "Variables": {
            "TransitS3Bucket": {
              "Ref": "S3BucketName"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "VgwPollerRole",
            "Arn"
          ]
        },
        "Timeout": 60,
        "Handler": "spokevgw_function.spokevgw_handler",
        "Runtime": "python2.7",
        "MemorySize": 128
      }
    },
    "ScheduledRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "ScheduledRule",
        "ScheduleExpression": "rate(5 minutes)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "VgwPollerLambda",
                "Arn"
              ]
            },
            "Id": "TargetFunctionV1"
          }
        ]
      }
    },
    "PermissionForEventsToInvokeLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "VgwPollerLambda"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "ScheduledRule",
            "Arn"
          ]
        }
      }
    }
  },
  "Outputs": {
    "VgwPollerLambda": {
      "Description": "Spoke VGW Lambda Function Name",
      "Value": {
        "Ref": "VgwPollerLambda"
      }
    },
    "VgwPollerRole": {
      "Description": "Spoke VGW Lambda Function Role Name",
      "Value": {
        "Ref": "VgwPollerRole"
      }
    }
  }
}
